// Mocks generated by Mockito 5.1.0 from annotations
// in todo_app/test/features/todo/data/datasources/todo_local_data_source_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:sqflite/sqflite.dart' as _i4;
import 'package:todo_app/features/todo/data/datasources/local/app_database.dart'
    as _i5;
import 'package:todo_app/features/todo/data/datasources/local/daos/todo_dao.dart'
    as _i2;
import 'package:todo_app/features/todo/domain/entities/todo.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeToDoDao_0 extends _i1.Fake implements _i2.ToDoDao {}

class _FakeStreamController_1<T> extends _i1.Fake
    implements _i3.StreamController<T> {}

class _FakeDatabaseExecutor_2 extends _i1.Fake implements _i4.DatabaseExecutor {
}

/// A class which mocks [AppDatabase].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppDatabase extends _i1.Mock implements _i5.AppDatabase {
  MockAppDatabase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ToDoDao get todoDao => (super.noSuchMethod(Invocation.getter(#todoDao),
      returnValue: _FakeToDoDao_0()) as _i2.ToDoDao);
  @override
  _i3.StreamController<String> get changeListener =>
      (super.noSuchMethod(Invocation.getter(#changeListener),
              returnValue: _FakeStreamController_1<String>())
          as _i3.StreamController<String>);
  @override
  set changeListener(_i3.StreamController<String>? _changeListener) =>
      super.noSuchMethod(Invocation.setter(#changeListener, _changeListener),
          returnValueForMissingStub: null);
  @override
  _i4.DatabaseExecutor get database =>
      (super.noSuchMethod(Invocation.getter(#database),
          returnValue: _FakeDatabaseExecutor_2()) as _i4.DatabaseExecutor);
  @override
  set database(_i4.DatabaseExecutor? _database) =>
      super.noSuchMethod(Invocation.setter(#database, _database),
          returnValueForMissingStub: null);
  @override
  _i3.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
}

/// A class which mocks [ToDoDao].
///
/// See the documentation for Mockito's code generation for more information.
class MockToDoDao extends _i1.Mock implements _i2.ToDoDao {
  MockToDoDao() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> saveTodo(_i6.ToDo? toDo) =>
      (super.noSuchMethod(Invocation.method(#saveTodo, [toDo]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.Future<List<_i6.ToDo>> getAllTodos() =>
      (super.noSuchMethod(Invocation.method(#getAllTodos, []),
              returnValue: Future<List<_i6.ToDo>>.value(<_i6.ToDo>[]))
          as _i3.Future<List<_i6.ToDo>>);
  @override
  _i3.Future<List<_i6.ToDo>> getConditionedTodos(bool? isCompleted) => (super
          .noSuchMethod(Invocation.method(#getConditionedTodos, [isCompleted]),
              returnValue: Future<List<_i6.ToDo>>.value(<_i6.ToDo>[]))
      as _i3.Future<List<_i6.ToDo>>);
}
